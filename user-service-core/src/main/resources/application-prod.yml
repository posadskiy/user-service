#tag::micronaut[]
micronaut:
  application:
    name: user-service
  server:
    port: 8095
    cors:
      enabled: true
      configurations:
        ui:
          allowed-origins: ${CORS_ALLOWED_ORIGINS:}
          allowed-methods: GET,POST,PUT,DELETE,OPTIONS
          allowed-headers: "*"
          allow-credentials: true
  router:
    static-resources:
      swagger:
        paths: classpath:META-INF/swagger
        mapping: /swagger/**
      swagger-ui:
        paths: classpath:META-INF/swagger/views/swagger-ui
        mapping: /swagger-ui/**
  security:
    authentication: bearer
    intercept-url-map:
      - pattern: /swagger-ui/**
        access: isAnonymous()
      - pattern: /swagger/**
        access: isAnonymous()
      - pattern: /v3/api-docs/**
        access: isAnonymous()
      - pattern: /prometheus
        access: isAnonymous()
      - pattern: /health
        access: isAnonymous()
    token:
      jwt:
        signatures:
          secret:
            generator:
              secret: "${JWT_GENERATOR_SIGNATURE_SECRET}"
        generator:
          refresh-token:
            enabled: true
            secret: "${JWT_GENERATOR_SIGNATURE_SECRET}"
      generator:
        access-token:
          expiration: ${JWT_ACCESS_TOKEN_EXPIRATION:360000}
  metrics:
    enabled: true
    export:
      prometheus:
        enabled: true
        descriptions: true
        step: ${METRICS_STEP:1m}
    binders:
      database:
        enabled: true
        include:
          - "hikari"
          - "jdbc"
    distribution:
      percentiles-histogram:
        hikaricp.connections: true
        hikaricp.connections.idle: true
        hikaricp.connections.active: true
        hikaricp.connections.pending: true
        hikaricp.connections.max: true
        hikaricp.connections.min: true
        hikaricp.connections.timeout: true
        hikaricp.connections.creation: true
        hikaricp.connections.acquire: true
        hikaricp.connections.usage: true
        jdbc.connections.active: true
        jdbc.connections.idle: true
        jdbc.connections.max: true
        jdbc.connections.min: true
        jdbc.connections.timeout: true
        jdbc.connections.creation: true
        jdbc.connections.acquire: true
        jdbc.connections.usage: true
  endpoints:
    prometheus:
      enabled: true
      sensitive: false
    health:
      enabled: true
      sensitive: false
      details:
        enabled: true
#end::micronaut[]

#tag::database[]
datasources:
  default:
    url: ${DATASOURCE_URL}
    username: ${DATASOURCE_USERNAME}
    password: ${DATASOURCE_PASSWORD}
    driver-class-name: org.postgresql.Driver
    schema-generate: NONE
    dialect: POSTGRES
    hikari:
      maximum-pool-size: ${DB_MAX_POOL_SIZE:10}
      minimum-idle: ${DB_MIN_IDLE:5}
      connection-timeout: ${DB_CONNECTION_TIMEOUT:30000}
      idle-timeout: ${DB_IDLE_TIMEOUT:600000}
      max-lifetime: ${DB_MAX_LIFETIME:1800000}
flyway:
  datasources:
    default:
      enabled: true
      baseline-on-migrate: true
      validate-on-migrate: true
#end::database[]

#tag::jaeger[]
tracing:
  jaeger:
    enabled: true
    sampler:
      probability: ${JAEGER_SAMPLER_PROBABILITY:0.01}
    http-sender:
      url: ${JAEGER_HTTP_SENDER_URL:http://jaeger:14268/api/traces}
#end::jaeger[]

#tag::logging[]
logging:
  level:
    root: ${LOG_LEVEL_ROOT:INFO}
    com.posadskiy.user: ${LOG_LEVEL_APP:INFO}
    io.micronaut: ${LOG_LEVEL_MICRONAUT:WARN}
    org.hibernate.SQL: ${LOG_LEVEL_SQL:WARN}
    org.hibernate.type.descriptor.sql.BasicBinder: ${LOG_LEVEL_SQL_PARAMS:WARN}
#end::logging[]
